<?php

// This file is auto-generated by Think Runtime Composer Plugin
// Template version for custom runtime configurations

use Think\Runtime\Internal\BasicErrorHandler;

if (!class_exists('Think\\Runtime\\Internal\\BasicErrorHandler', false)) {
    class BasicErrorHandler
    {
        public static function register(): void
        {
            set_error_handler([self::class, 'handleError']);
            set_exception_handler([self::class, 'handleException']);
            register_shutdown_function([self::class, 'handleShutdown']);
        }

        public static function handleError($severity, $message, $file, $line): bool
        {
            if (!(error_reporting() & $severity)) {
                return false;
            }
            throw new \ErrorException($message, 0, $severity, $file, $line);
        }

        public static function handleException(\Throwable $exception): void
        {
            echo "Fatal error: " . $exception->getMessage() . "\n";
            echo "File: " . $exception->getFile() . ":" . $exception->getLine() . "\n";
            exit(1);
        }

        public static function handleShutdown(): void
        {
            $error = error_get_last();
            if ($error && in_array($error['type'], [E_ERROR, E_CORE_ERROR, E_COMPILE_ERROR, E_PARSE])) {
                echo "Fatal error: " . $error['message'] . "\n";
                echo "File: " . $error['file'] . ":" . $error['line'] . "\n";
            }
        }
    }
}

// Register error handler
BasicErrorHandler::register();

// Load Composer autoloader
require_once __DIR__ . '/autoload.php';

// Get runtime options from environment or configuration
$runtimeOptions = array_merge(
    {{RUNTIME_OPTIONS}},
    $_SERVER['APP_RUNTIME_OPTIONS'] ?? []
);

// Create runtime instance
$runtime = new {{RUNTIME_CLASS}}($runtimeOptions);

// Get the application callable from the entry point
$app = require $_SERVER['SCRIPT_FILENAME'] ?? $_SERVER['argv'][0] ?? 'index.php';

if (!is_callable($app)) {
    throw new \InvalidArgumentException('The application entry point must return a callable');
}

// Resolve the application callable and its arguments
[$callable, $arguments] = $runtime->getResolver($app)->resolve();

// Call the application callable to get the application instance
$application = $callable(...$arguments);

// Get the appropriate runner for the application
$runner = $runtime->getRunner($application);

// Run the application and exit with the returned status code
exit($runner->run());
