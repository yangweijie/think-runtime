<?php
// FrankenPHP Worker Script for ThinkPHP
// Auto-generated by think-runtime

declare(strict_types=1);

// 错误报告配置
$appDebug = true;

if (!$appDebug) {
    // 生产环境：完全禁用错误输出
    ini_set("display_errors", "0");
    ini_set("display_startup_errors", "0");
    ini_set("html_errors", "0");
    ini_set("log_errors", "1");
    ini_set("error_log", "runtime/log/frankenphp_php_error.log");

    // 只报告致命错误
    error_reporting(E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR);

    // 自定义错误处理器抑制非致命错误
    set_error_handler(function($severity, $message, $file, $line) {
        if ($severity & (E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR)) {
            return false; // 让PHP处理致命错误
        }
        return true; // 抑制其他错误
    });
} else {
    // 开发环境：显示所有错误
    ini_set("display_errors", "1");
    ini_set("display_startup_errors", "1");
    ini_set("log_errors", "1");
    ini_set("error_log", "runtime/log/frankenphp_php_error.log");
    error_reporting(E_ALL);
}

// 自动检测并加载 autoload.php
$autoloadPaths = [
    __DIR__ . "/vendor/autoload.php",
    __DIR__ . "/../vendor/autoload.php",
    __DIR__ . "/../../vendor/autoload.php",
    __DIR__ . "/../../../vendor/autoload.php",
];

$autoloadFound = false;
foreach ($autoloadPaths as $autoloadPath) {
    if (file_exists($autoloadPath)) {
        require_once $autoloadPath;
        $autoloadFound = true;
        break;
    }
}

if (!$autoloadFound) {
    die("Error: Could not find vendor/autoload.php. Please run 'composer install' first.\n");
}

use think\App;
use think\Request;
use think\Response;

// 设置正确的工作目录和路径
if (!defined("ROOT_PATH")) {
    define("ROOT_PATH", __DIR__ . "/");
}

// 初始化ThinkPHP应用
$app = new App();

// 设置应用路径（如果需要）
if (method_exists($app, "setRootPath")) {
    $app->setRootPath(__DIR__ . "/");
}

$app->initialize();

// Worker模式主循环
for ($nbHandledRequests = 0, $running = true; $running; ++$nbHandledRequests) {
    $running = frankenphp_handle_request(function () use ($app, $appDebug): void {
        try {
            // 确保工作目录正确
            if (getcwd() !== __DIR__) {
                chdir(__DIR__);
            }

            // 重置应用状态（重要：避免请求间状态污染）
            if (method_exists($app, "clearInstances")) {
                $app->clearInstances();
            }

            // 创建ThinkPHP请求对象
            $request = $app->make(Request::class);

            // 处理请求
            $response = $app->http->run($request);

            // 发送响应
            if ($response instanceof Response) {
                // ThinkPHP Response对象
                $response->send();
            } else {
                // 字符串响应
                echo $response;
            }

        } catch (\Throwable $e) {
            // 错误处理
            http_response_code(500);

            if ($appDebug) {
                // 开发环境：显示详细错误信息
                header("Content-Type: text/html; charset=utf-8");
                echo "<h1>FrankenPHP Worker Error</h1>";
                echo "<p><strong>Message:</strong> " . htmlspecialchars($e->getMessage()) . "</p>";
                echo "<p><strong>File:</strong> " . htmlspecialchars($e->getFile()) . "</p>";
                echo "<p><strong>Line:</strong> " . $e->getLine() . "</p>";
                echo "<h2>Stack Trace:</h2>";
                echo "<pre>" . htmlspecialchars($e->getTraceAsString()) . "</pre>";
            } else {
                // 生产环境：简单错误信息
                header("Content-Type: application/json");
                echo json_encode([
                    "error" => true,
                    "message" => "Internal Server Error",
                    "code" => 500
                ], JSON_UNESCAPED_UNICODE);
            }

            // 记录错误到日志
            error_log(sprintf(
                "[%s] FrankenPHP Worker Error: %s in %s:%d\nStack trace:\n%s",
                date("Y-m-d H:i:s"),
                $e->getMessage(),
                $e->getFile(),
                $e->getLine(),
                $e->getTraceAsString()
            ));
        }
    });

    // 垃圾回收和内存管理
    if ($nbHandledRequests % 100 === 0) {
        gc_collect_cycles();

        // 检查内存使用情况
        $memoryUsage = memory_get_usage(true);
        $memoryLimit = ini_get("memory_limit");
        if ($memoryLimit !== "-1") {
            $memoryLimitBytes = parseMemoryLimit($memoryLimit);
            if ($memoryUsage > $memoryLimitBytes * 0.8) {
                // 内存使用超过80%，重启worker
                break;
            }
        }
    }
}

/**
 * 解析内存限制字符串
 */
function parseMemoryLimit($limit) {
    $limit = trim($limit);
    $last = strtolower($limit[strlen($limit)-1]);
    $limit = (int) $limit;
    switch($last) {
        case "g": $limit *= 1024;
        case "m": $limit *= 1024;
        case "k": $limit *= 1024;
    }
    return $limit;
}
